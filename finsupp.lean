/-
Copyright (c) 2017 Johannes Hölzl. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Johannes Hölzl

Type of functions with finite support.

Functions with finite support provide the basis for the following concrete instanes:

 * ℕ →₀ α: Polynomials (where α is a ring)
 * (σ →₀ ℕ) →₀ α: Multivariate Polynomials (again α is a ring, and σ are variable names)
 * α →₀ ℕ: Multisets
 * α →₀ ℤ: Abelean groups freely generated by α
 * β →₀ α: Linear combinations over β where α is the scalar ring

Most of the theory assumes that the range is a commutative monoid. This gives us the big sum
operator as a powerful way to construct `finsupp` elements.

-/

import data.set.finite data.finset algebra.big_operators
noncomputable theory

open classical set function
local attribute [instance] decidable_inhabited prop_decidable

reserve infix ` →₀ `:25

universes u u₁ u₂ v v₁ v₂ w x

lemma exists_finset_of_finite {α : Type u} {s : set α} (hs : finite s) :
  ∃f:finset α, s = {a | a ∈ f} :=
begin
  induction hs,
  case finite.empty { exact ⟨∅, rfl⟩ },
  case finite.insert a s has hs ih {
    cases ih with f hf,
    refine ⟨insert a f, set.ext _⟩,
    simp [hf]
  }
end

-- should this be a general instance?
lemma prod.eq_iff_fst_eq_snd_eq {α : Type u} {β : Type v} :
  ∀{p q : α × β}, p = q ↔ (p.1 = q.1 ∧ p.2 = q.2)
| ⟨p₁, p₂⟩ ⟨q₁, q₂⟩ := begin simp end


/- Should we use finset instead of finite? -/

def finsupp (α : Type u) (β : Type v) [has_zero β] := {f : α → β // finite {a | f a ≠ 0}}

infix →₀ := finsupp

namespace finsupp
variables {α : Type u} {β : Type v} {α₁ : Type u₁} {α₂ : Type u₂} {β₁ : Type v₁} {β₂ : Type v₂}

section
variable [has_zero β]

instance : has_coe_to_fun (α →₀ β) := ⟨λm, α → β, subtype.val⟩

instance : has_zero (α →₀ β) := ⟨⟨(λ_, 0), by simp [finite.empty]⟩⟩
@[simp] lemma zero_apply {a : α} : (0 : α →₀ β) a = 0 := rfl

instance : inhabited (α →₀ β) := ⟨0⟩

lemma ext : ∀{f g : α →₀ β}, (∀a, f a = g a) → f = g
| ⟨f, _⟩ ⟨g, _⟩ h := subtype.eq $ funext $ h

lemma finite_supp (f : α →₀ β) : finite {a | f a ≠ 0} :=
f.property

def support (f : α →₀ β) : finset α := some $ exists_finset_of_finite f.finite_supp

@[simp] lemma mem_support_iff (f : α →₀ β) {a : α} : a ∈ f.support ↔ f a ≠ 0 :=
have {a | f a ≠ 0} = {a | a ∈ f.support},
  from some_spec $ exists_finset_of_finite f.finite_supp,
show a ∈ {a | a ∈ f.support} ↔ a ∈ {a | f a ≠ 0},
  by rw [this]

@[simp] lemma support_zero : (0 : α →₀ β).support = ∅ :=
finset.ext $ assume a, by simp; refl

def single (a : α) (b : β) : α →₀ β :=
⟨λa', if a = a' then b else 0,
  finite_subset (@finite_singleton α a) $ assume a', by by_cases a = a' with h; simp [h]⟩

lemma single_apply {a a' : α} {b : β} :
  (single a b : α →₀ β) a' = (if a = a' then b else 0) :=
rfl

@[simp] lemma single_eq_same {a : α} {b : β} :
  (single a b : α →₀ β) a = b :=
by simp [single_apply]

@[simp] lemma single_eq_of_ne {a a' : α} {b : β} (h : a ≠ a') :
  (single a b : α →₀ β) a' = 0 :=
by simp [single_apply, h]

@[simp] lemma single_zero {a : α} : (single a 0 : α →₀ β) = 0 :=
ext $ assume a',
begin
  by_cases a = a' with h,
  { rw [h, single_eq_same, zero_apply] },
  { rw [single_eq_of_ne h, zero_apply] }
end

lemma support_single_subset {a : α} {b : β} : (single a b).support ⊆ {a} :=
have ∀a', (if a = a' then b else 0) ≠ 0 → a' = a,
  by intro a'; by_cases a = a'; simp [*],
by simpa [finset.subset_iff, mem_support_iff, single_apply] using this

lemma support_single_ne_zero {a : α} {b : β} (hb : b ≠ 0) :
  (single a b).support = {a} :=
finset.subset.antisymm
  support_single_subset
  (finset.subset_iff.mpr $ by simp [mem_support_iff, hb])

end

def map_range [has_zero β₁] [has_zero β₂]
  (f : β₁ → β₂) (hf : f 0 = 0) (g : α →₀ β₁) : α →₀ β₂ :=
⟨f ∘ g, finite_subset g.finite_supp $
  assume a, by simp [(∘), hf, not_imp_not] {contextual:=tt}⟩

def zip_with [has_zero β] [has_zero β₁] [has_zero β₂] (f : β₁ → β₂ → β) (hf : f 0 0 = 0)
  (g₁ : α →₀ β₁) (g₂ : α →₀ β₂) : (α →₀ β) :=
⟨λa, f (g₁ a) (g₂ a), finite_subset (finite_union g₁.finite_supp g₂.finite_supp) $
  assume a hfa, not_and_distrib.mp $ assume ⟨ha₁, ha₂⟩, hfa $ by simp [ha₁, ha₂, hf]⟩

@[simp] lemma zip_with_apply [has_zero β] [has_zero β₁] [has_zero β₂]
  {f : β₁ → β₂ → β} {hf : f 0 0 = 0} {g₁ : α →₀ β₁} {g₂ : α →₀ β₂} {a : α} :
  zip_with f hf g₁ g₂ a = f (g₁ a) (g₂ a) :=
rfl

lemma support_zip_with [has_zero β] [has_zero β₁] [has_zero β₂]
  {f : β₁ → β₂ → β} {hf : f 0 0 = 0} {g₁ : α →₀ β₁} {g₂ : α →₀ β₂} :
  (zip_with f hf g₁ g₂).support ⊆ g₁.support ∪ g₂.support :=
begin
  simp [finset.subset_iff, finset.mem_union, mem_support_iff],
  intro x,
  rw [←not_and_distrib, not_imp_not],
  simp [hf] {contextual := tt}
end

def sum {γ : Type w} [has_zero β] [add_comm_monoid γ] (f : α →₀ β) (g : α → β → γ) : γ :=
f.support.sum (λa, g a (f a))

instance [add_monoid β] : has_add (α →₀ β) :=
⟨zip_with (+) (add_zero 0)⟩

@[simp] lemma add_apply [add_monoid β] {g₁ g₂ : α →₀ β} {a : α} :
  (g₁ + g₂) a = g₁ a + g₂ a :=
rfl

lemma support_add [add_monoid β] {g₁ g₂ : α →₀ β} :
  (g₁ + g₂).support ⊆ g₁.support ∪ g₂.support :=
support_zip_with

@[simp] lemma single_add [add_monoid β] {a : α} {b₁ b₂ : β} :
  single a (b₁ + b₂) = single a b₁ + single a b₂ :=
ext $ assume a',
begin
  by_cases a = a' with h,
  { rw [h, add_apply, single_eq_same, single_eq_same, single_eq_same] },
  { rw [add_apply, single_eq_of_ne h, single_eq_of_ne h, single_eq_of_ne h, zero_add] }
end

instance [add_monoid β] : add_monoid (α →₀ β) :=
{ add_monoid .
  zero      := 0,
  add       := (+),
  add_assoc := assume ⟨f, hf⟩ ⟨g, hg⟩ ⟨h, hh⟩, ext $ assume a, add_assoc _ _ _,
  zero_add  := assume ⟨f, hf⟩, ext $ assume a, zero_add _,
  add_zero  := assume ⟨f, hf⟩, ext $ assume a, add_zero _ }

instance [add_comm_monoid β] : add_comm_monoid (α →₀ β) :=
{ finsupp.add_monoid with
  add_comm := assume ⟨f, _⟩ ⟨g, _⟩, ext $ assume a, add_comm _ _ }

instance [add_group β] : add_group (α →₀ β) :=
{ finsupp.add_monoid with
  neg          := map_range (has_neg.neg) neg_zero,
  add_left_neg := assume ⟨f, _⟩, ext $ assume x, add_left_neg _ }

instance [add_comm_group β] : add_comm_group (α →₀ β) :=
{ finsupp.add_group with add_comm := add_comm }

@[simp] lemma sum_apply [has_zero β] [add_comm_monoid β₁]
  {f : α₁ →₀ β} {g : α₁ → β → α₂ →₀ β₁} {a₂ : α₂} :
  (f.sum g) a₂ = f.sum (λa₁ b, g a₁ b a₂) :=
(finset.sum_hom (λf : α₂ →₀ β₁, f a₂) rfl (assume a b, rfl)).symm

lemma support_sum [has_zero β] [add_comm_monoid β₁]
  {f : α →₀ β} {g : α → β → (α₁ →₀ β₁)} :
  (f.sum g).support ⊆ f.support.bind (λa, (g a (f a)).support) :=
have ∀a₁ : α₁, f.sum (λ (a : α) (b : β), (g a b) a₁) ≠ 0 →
    (∃ (a : α), f a ≠ 0 ∧ ¬ (g a (f a)) a₁ = 0),
  from assume a₁ h,
  let ⟨a, ha, ne⟩ := finset.exists_ne_zero_of_sum_ne_zero h in
  ⟨a, f.mem_support_iff.mp ha, ne⟩,
by simpa [finset.subset_iff, mem_support_iff, finset.mem_bind_iff, sum_apply] using this

@[simp] lemma sum_zero {γ : Type w} [add_comm_monoid β] [add_comm_monoid γ] {f : α →₀ β} :
  f.sum (λa b, (0 : γ)) = 0 :=
finset.sum_const_zero

@[simp] lemma sum_add {γ : Type w} [add_comm_monoid β] [add_comm_monoid γ] {f : α →₀ β}
  {h₁ h₂ : α → β → γ} :
  f.sum (λa b, h₁ a b + h₂ a b) = f.sum h₁ + f.sum h₂ :=
finset.sum_add_distrib

@[simp] lemma sum_single [add_comm_monoid β] {f : α →₀ β} :
  f.sum single = f :=
have ∀a:α, f.sum (λa' b, ite (a' = a) b 0) =
    ({a} : finset α).sum (λa', ite (a' = a) (f a') 0),
begin
  intro a,
  by_cases a ∈ f.support with h,
  { have : {a} ⊆ f.support,
      { simp [finset.subset_iff, *] at * },
    refine (finset.sum_subset this _).symm,
    simp {contextual := tt} },
  { transitivity (f.support.sum (λa, (0 : β))),
    { refine (finset.sum_congr _),
      intros a' ha',
      have h: a' ≠ a,
        { assume eq, simp * at * },
      simp * at * },
    { simp * at * } }
end,
ext $ assume a, by simp [single_apply, this]

lemma sum_zero_index {γ : Type w} [add_comm_monoid β] [add_comm_monoid γ] {h : α → β → γ} :
  (0 : α →₀ β).sum h = 0 :=
by simp [finsupp.sum, support_zero]

lemma sum_single_index {γ : Type w} [add_comm_monoid β] [add_comm_monoid γ] {a : α} {b : β}
  {h : α → β → γ} (h_zero : h a 0 = 0) : (single a b).sum h = h a b :=
begin
  by_cases b = 0 with h,
  { simp [h, sum_zero_index, h_zero] },
  { simp [finsupp.sum, support_single_ne_zero h] }
end

lemma sum_add_index {γ : Type w} [add_comm_monoid β] [add_comm_monoid γ] {f g : α →₀ β}
  {h : α → β → γ} (h_zero : ∀a, h a 0 = 0) (h_add : ∀a b₁ b₂, h a (b₁ + b₂) = h a b₁ + h a b₂):
  (f + g).sum h = f.sum h + g.sum h :=
have f_eq : (f.support ∪ g.support).sum (λa, h a (f a)) = f.sum h,
  from (finset.sum_subset finset.subset_union_left $
    by simp [mem_support_iff, h_zero] {contextual := tt}).symm,
have g_eq : (f.support ∪ g.support).sum (λa, h a (g a)) = g.sum h,
  from (finset.sum_subset finset.subset_union_right $
    by simp [mem_support_iff, h_zero] {contextual := tt}).symm,
calc (f + g).support.sum (λa, h a ((f + g) a)) =
      (f.support ∪ g.support).sum (λa, h a ((f + g) a)) :
    finset.sum_subset support_add $
      by simp [mem_support_iff, h_zero] {contextual := tt}
  ... = (f.support ∪ g.support).sum (λa, h a (f a)) +
      (f.support ∪ g.support).sum (λa, h a (g a)) :
    by simp [h_add, finset.sum_add_distrib]
  ... = _ : by rw [f_eq, g_eq]

lemma sum_finset_sum_index {γ : Type w} {ι : Type x} [add_comm_monoid β] [add_comm_monoid γ]
  {s : finset ι} {g : ι → α →₀ β}
  {h : α → β → γ} (h_zero : ∀a, h a 0 = 0) (h_add : ∀a b₁ b₂, h a (b₁ + b₂) = h a b₁ + h a b₂):
  s.sum (λi, (g i).sum h) = (s.sum g).sum h :=
finset.sum_hom (λf : α →₀ β, f.sum h) sum_zero_index (assume f g, sum_add_index h_zero h_add)

lemma sum_sum_index {γ : Type w} [add_comm_monoid β₁] [add_comm_monoid β₂] [add_comm_monoid γ]
  {f : α₁ →₀ β₁} {g : α₁ → β₁ → α₂ →₀ β₂}
  {h : α₂ → β₂ → γ} (h_zero : ∀a, h a 0 = 0) (h_add : ∀a b₁ b₂, h a (b₁ + b₂) = h a b₁ + h a b₂):
  (f.sum g).sum h = f.sum (λa b, (g a b).sum h) :=
(sum_finset_sum_index h_zero h_add).symm

section map_domain
variables [add_comm_monoid β] {v v₁ v₂ : α →₀ β}

def map_domain (f : α₁ → α₂) (v : α₁ →₀ β) : α₂ →₀ β :=
v.sum $ λa b, single (f a) b

lemma map_domain_id : map_domain id v = v :=
sum_single

lemma map_domain_comp {f : α → α₁} {g : α₁ → α₂} :
  map_domain (g ∘ f) v = map_domain g (map_domain f v) :=
by simp [map_domain, sum_sum_index, sum_single_index]

lemma map_domain_single {f : α → α₁} {a : α} {b : β} : map_domain f (single a b) = single (f a) b :=
sum_single_index (by simp)

lemma map_domain_zero {f : α → α₂} : map_domain f 0 = (0 : α₂ →₀ β) :=
sum_zero_index

lemma map_domain_add {f : α → α₂} : map_domain f (v₁ + v₂) = map_domain f v₁ + map_domain f v₂ :=
sum_add_index (by simp) (by simp)

lemma map_domain_finset_sum {ι : Type x} {f : α → α₂} {s : finset ι} {v : ι → α →₀ β} :
  map_domain f (s.sum v) = s.sum (λi, map_domain f (v i)) :=
by refine (sum_finset_sum_index _ _).symm; simp

lemma map_domain_sum [has_zero β₁] {f : α → α₂} {s : α →₀ β₁} {v : α → β₁ → α →₀ β} :
  map_domain f (s.sum v) = s.sum (λa b, map_domain f (v a b)) :=
by refine (sum_finset_sum_index _ _).symm; simp

end map_domain

instance [has_add α] [semiring β] : has_mul (α →₀ β) :=
⟨λf g, f.sum $ λa₁ b₁, g.sum $ λa₂ b₂, single (a₁ + a₂) (b₁ * b₂)⟩

lemma mul_def [has_add α] [semiring β] {f g : α →₀ β} :
  f * g = (f.sum $ λa₁ b₁, g.sum $ λa₂ b₂, single (a₁ + a₂) (b₁ * b₂)) :=
rfl

instance [has_zero α] [has_zero β] [has_one β] : has_one (α →₀ β) :=
⟨single 0 1⟩

lemma one_def [has_zero α] [has_zero β] [has_one β] : 1 = (single 0 1 : α →₀ β) :=
rfl

section
variables [add_monoid α] [semiring β]

-- TODO: the simplifier unfolds 0 in the instance proof!
private lemma zero_mul (f : α →₀ β) : 0 * f = 0 := by simp [mul_def, sum_zero_index]
private lemma mul_zero (f : α →₀ β) : f * 0 = 0 := by simp [mul_def, sum_zero_index]
private lemma left_distrib (a b c : α →₀ β) : a * (b + c) = a * b + a * c :=
by simp [mul_def, sum_add_index, mul_add]
private lemma right_distrib (a b c : α →₀ β) : (a + b) * c = a * c + b * c :=
by simp [mul_def, sum_add_index, add_mul]

instance : semiring (α →₀ β) :=
{ finsupp.add_comm_monoid with
  one       := 1,
  mul       := (*),
  one_mul   := assume f, by simp [mul_def, one_def, sum_single_index],
  mul_one   := assume f, by simp [mul_def, one_def, sum_single_index],
  zero_mul  := zero_mul,
  mul_zero  := mul_zero,
  mul_assoc := assume f g h,
    by simp [mul_def, sum_sum_index, sum_zero_index, sum_add_index, sum_single_index,
        add_mul, mul_add],
  left_distrib  := left_distrib,
  right_distrib := right_distrib }

end

instance [add_comm_monoid α] [comm_semiring β] : comm_semiring (α →₀ β) :=
{ finsupp.semiring with
  mul_comm := assume f g,
  begin
    simp [mul_def, finsupp.sum],
    rw [finset.sum_comm],
    simp
  end }

instance [add_monoid α] [ring β] : ring (α →₀ β) :=
{ finsupp.semiring with
  neg := has_neg.neg,
  add_left_neg := add_left_neg }


lemma neg_apply [add_monoid α] [ring β]  {f : α →₀ β} {n : α }:  (- f) n = - (f n) :=
begin intros, simp [coe_fn], simp [has_coe_to_fun.coe], simp [has_neg.neg, add_group.neg, add_comm_group.neg, ring.neg] ,
simp [map_range], simp [(∘)], apply rfl
end  

lemma neg_support [add_monoid α] [ring β]  {f : α →₀ β} : support f = support (-f) := 
begin apply finset.ext, intro, apply iff.intro, 
  {intro, 
    have htmp : (f a ≠ 0) ,by apply ( (iff.elim_left (mem_support_iff f)) a_1),
    have htmp2 : ((- f) a ≠ 0), 
       from calc (- f) a = - (f a) : neg_apply
       ... ≠  0 : iff.elim_right neg_ne_zero htmp, 
  apply (iff.elim_right (mem_support_iff (-f))), exact htmp2},
  {intro,
    have htmp : ((-f) a ≠ 0), by apply  (iff.elim_left (mem_support_iff (-f)) a_1),
    have htmp2 : (f a ≠ 0), 
       from calc f a = ((- -f) a) : by rw [neg_neg]
       ... ≠  0 : iff.elim_right neg_ne_zero htmp, 
  apply (iff.elim_right (mem_support_iff (f))), exact htmp2}
  
  end

instance [add_comm_monoid α] [comm_ring β] : comm_ring (α →₀ β) :=
{ finsupp.ring with mul_comm := mul_comm }

lemma single_mul_single [has_add α] [semiring β] {a₁ a₂ : α} {b₁ b₂ : β}:
  single a₁ b₁ * single a₂ b₂ = single (a₁ + a₂) (b₁ * b₂) :=
by simp [mul_def, sum_single_index]

lemma prod_single {ι : Type x} [add_comm_monoid α] [comm_semiring β] {s : finset ι}
  {a : ι → α} {b : ι → β} :
  s.prod (λi, single (a i) (b i)) = single (s.sum a) (s.prod b) :=
 s.induction_on (by simp [one_def]) (by simp [single_mul_single] {contextual := tt})

end finsupp
